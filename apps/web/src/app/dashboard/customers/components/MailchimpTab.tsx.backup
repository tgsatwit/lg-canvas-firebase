"use client";

import { useState, useEffect, useMemo } from 'react';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { cn } from '@/lib/utils';
import { MailchimpList, MailchimpMember, MailchimpSyncStatus, MailchimpMetadata } from '@opencanvas/shared';

interface MailchimpTabProps {
  searchQuery: string;
  onSearchChange: (query: string) => void;
}

export function MailchimpTab({ searchQuery, onSearchChange }: MailchimpTabProps) {
  // Data state
  const [lists, setLists] = useState<MailchimpList[]>([]);
  const [members, setMembers] = useState<MailchimpMember[]>([]);
  const [loading, setLoading] = useState(true);
  const [syncing, setSyncing] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [totalMembers, setTotalMembers] = useState(0);
  const [stats, setStats] = useState({ subscribed: 0, unsubscribed: 0, cleaned: 0, pending: 0 });
  
  // Filter state
  const [statusFilter, setStatusFilter] = useState<'subscribed' | 'unsubscribed' | 'cleaned' | 'pending' | 'mixed' | 'all'>('subscribed');
  const [listFilter, setListFilter] = useState<string>('all');
  const [tagFilter, setTagFilter] = useState<string>('all');
  
  // Collapsible filters state
  const [filtersCollapsed, setFiltersCollapsed] = useState(true);
  
  // Pagination state
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage] = useState(50);
  const [totalPages, setTotalPages] = useState(1);
  const [hasMore, setHasMore] = useState(false);
  
  // Sync status
  const [lastSyncTime, setLastSyncTime] = useState<Date | null>(null);
  const [syncStatus, setSyncStatus] = useState<MailchimpSyncStatus | null>(null);

  // Fetch data from Firebase on mount
  useEffect(() => {
    fetchDataFromFirebase();
    fetchSyncStatus();
  }, []);

  // Refetch data when filters change
  useEffect(() => {
    if (lists.length > 0) { // Only refetch if we have initial data
      fetchDataFromFirebase();
    }
  }, [searchQuery, listFilter, statusFilter, tagFilter, currentPage]);

  const fetchSyncStatus = async () => {
    try {
      const response = await fetch('/api/mailchimp/sync-status', {
        method: 'GET',
      });
      if (response.ok) {
        const data = await response.json();
        setSyncStatus(data.status);
        if (data.status?.lastSync) {
          setLastSyncTime(new Date(data.status.lastSync));
        }
      }
    } catch (err) {
      console.error('Error fetching sync status:', err);
    }
  };

  const fetchDataFromFirebase = async () => {
    try {
      setLoading(true);
      setError(null);

      // Build query parameters for server-side filtering and pagination
      const params = new URLSearchParams({
        source: 'firebase',
        page: currentPage.toString(),
        limit: itemsPerPage.toString(),
        ...(searchQuery && { search: searchQuery }),
        ...(listFilter !== 'all' && { list: listFilter }),
        ...(statusFilter !== 'all' && { status: statusFilter }),
        ...(tagFilter !== 'all' && { tag: tagFilter }),
      });

      const response = await fetch(`/api/mailchimp/lists?${params}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });
      
      if (!response.ok) {
        throw new Error(`Failed to fetch data: ${response.status}`);
      }

      const data = await response.json();
      if (data.success) {
        setLists(data.lists || []);
        setMembers(data.members || []);
        setTotalMembers(data.total_members || 0);
        setStats(data.stats || { subscribed: 0, unsubscribed: 0, cleaned: 0, pending: 0 });
        
        // Update pagination state
        if (data.pagination) {
          setTotalPages(data.pagination.total_pages);
          setHasMore(data.pagination.has_more);
        }
        
        console.log(`ðŸš€ Loaded ${data.members?.length || 0} members (page ${currentPage}/${data.pagination?.total_pages || 1})`);
      } else {
        throw new Error('Invalid response format');
      }
    } catch (err) {
      console.error('Error fetching data:', err);
      setError(err instanceof Error ? err.message : 'An error occurred');
    } finally {
      setLoading(false);
    }
  };

  const syncWithMailchimp = async () => {
    try {
      setSyncing(true);
      setError(null);

      const response = await fetch('/api/mailchimp/lists', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
      });
      
      if (!response.ok) {
        throw new Error(`Sync failed: ${response.status}`);
      }

      const data = await response.json();
      if (data.success) {
        console.log('Sync successful:', data.message);
        setLastSyncTime(new Date());
        // Refresh data after sync
        await fetchDataFromFirebase();
        await fetchSyncStatus();
      } else {
        throw new Error(data.error || 'Sync failed');
      }
    } catch (err) {
      console.error('Error syncing:', err);
      setError(err instanceof Error ? err.message : 'Sync failed');
    } finally {
      setSyncing(false);
    }
  };

  // Get all unique tags from current page members
  const allTags = useMemo(() => {
    if (!members || members.length === 0) return [];
    
    const tagSet = new Set<string>();
    members.forEach(member => {
      member.tags?.forEach(tag => {
        tagSet.add(tag);
      });
    });
    
    return Array.from(tagSet).sort();
  }, [members]);

  // Client-side filtering
  const filteredMembers = useMemo(() => {
    let filtered = members;

    // List filter
    if (listFilter && listFilter !== 'all') {
      filtered = filtered.filter(m => 
        m.list_memberships.some(membership => membership.list_id === listFilter)
      );
    }

    // Status filter
    if (statusFilter && statusFilter !== 'all') {
      if (statusFilter === 'mixed') {
        filtered = filtered.filter(m => m.overall_status === 'mixed');
      } else {
        filtered = filtered.filter(m => 
          m.overall_status === statusFilter || 
          m.list_memberships.some(membership => membership.status === statusFilter)
        );
      }
    }

    // Tag filter
    if (tagFilter && tagFilter !== 'all') {
      filtered = filtered.filter(m => 
        m.all_tags?.some(tag => tag.name === tagFilter)
      );
    }

    // Search filter
    if (searchQuery.trim()) {
      const query = searchQuery.toLowerCase();
      filtered = filtered.filter(m => 
        m.email_address.toLowerCase().includes(query) ||
        m.full_name?.toLowerCase().includes(query) ||
        m.merge_fields?.FNAME?.toLowerCase().includes(query) ||
        m.merge_fields?.LNAME?.toLowerCase().includes(query) ||
        m.all_tags?.some(tag => tag.name.toLowerCase().includes(query)) ||
        m.list_memberships.some(membership => membership.list_name.toLowerCase().includes(query))
      );
    }

    return filtered;
  }, [members, statusFilter, listFilter, tagFilter, searchQuery]);

  // Reset pagination when filters change
  useEffect(() => {
    setCurrentPage(1);
  }, [statusFilter, listFilter, tagFilter, searchQuery]);

  // Calculate pagination
  const totalPages = Math.ceil(filteredMembers.length / itemsPerPage);
  const startIndex = (currentPage - 1) * itemsPerPage;
  const endIndex = startIndex + itemsPerPage;
  const currentPageMembers = filteredMembers.slice(startIndex, endIndex);

  // Calculate stats from actual data
  const stats = useMemo(() => {
    return {
      total: members.length,
      byStatus: {
        subscribed: members.filter(m => m.overall_status === 'subscribed' || 
          m.list_memberships.some(l => l.status === 'subscribed')).length,
        unsubscribed: members.filter(m => m.overall_status === 'unsubscribed').length,
        cleaned: members.filter(m => m.overall_status === 'cleaned').length,
        pending: members.filter(m => m.overall_status === 'pending').length,
        mixed: members.filter(m => m.overall_status === 'mixed').length,
      },
      byList: lists.map(list => ({
        id: list.id,
        name: list.name,
        total: members.filter(m => m.list_memberships.some(l => l.list_id === list.id)).length,
        subscribed: members.filter(m => 
          m.list_memberships.some(l => l.list_id === list.id && l.status === 'subscribed')).length
      })),
      active: members.filter(m => m.aggregated_stats.active_lists > 0).length,
      multiList: members.filter(m => m.list_memberships.length > 1).length,
      vips: members.filter(m => m.is_vip_anywhere).length,
      totalLists: lists.length,
      totalTags: allTags.length
    };
  }, [members, lists, allTags]);

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      month: 'short',
      day: 'numeric',
      year: 'numeric'
    });
  };

  const getStatusBadgeColor = (status: string) => {
    switch (status) {
      case 'subscribed':
        return 'bg-green-100 text-green-700 border-green-200';
      case 'unsubscribed':
        return 'bg-red-100 text-red-700 border-red-200';
      case 'cleaned':
        return 'bg-orange-100 text-orange-700 border-orange-200';
      case 'pending':
        return 'bg-yellow-100 text-yellow-700 border-yellow-200';
      case 'mixed':
        return 'bg-purple-100 text-purple-700 border-purple-200';
      default:
        return 'bg-gray-100 text-gray-700 border-gray-200';
    }
  };

  if (loading) {
    return (
      <div className="flex flex-col items-center justify-center h-64 gap-4">
        <div className="relative">
          <div className="w-8 h-8 border-4 border-gray-200 rounded-full animate-spin border-t-pink-500"></div>
        </div>
        <div className="text-gray-600">Loading Mailchimp audience data...</div>
      </div>
    );
  }

  if (error && !members.length) {
    return (
      <div className="bg-red-50 border border-red-200 rounded-2xl p-6">
        <div className="text-red-600 font-medium mb-2">Error loading audience data</div>
        <div className="text-red-600 text-sm mb-4">{error}</div>
        <div className="flex gap-2">
          <Button 
            onClick={fetchDataFromFirebase}
            size="sm"
            className="bg-red-600 hover:bg-red-700 text-white"
          >
            Try Again
          </Button>
          <Button 
            onClick={syncWithMailchimp}
            size="sm"
            variant="outline"
            className="border-red-600 text-red-600 hover:bg-red-50"
          >
            Sync from Mailchimp
          </Button>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Stats Tiles */}
      <div className="grid grid-cols-5 gap-4">
        {/* Active Subscribers - Primary Tile */}
        <div className="bg-gradient-to-br from-pink-50 to-purple-50 rounded-2xl p-6 shadow-sm border-2 border-pink-200">
          <div className="flex items-center gap-4">
            <div 
              className="w-12 h-12 rounded-2xl flex items-center justify-center font-bold text-lg text-white"
              style={{
                background: `linear-gradient(135deg, rgba(236, 72, 153, 0.9) 0%, rgba(139, 92, 246, 0.9) 100%)`
              }}
            >
              {stats.active}
            </div>
            <div>
              <p className="text-2xl font-bold text-gray-900">{stats.active}</p>
              <p className="text-sm text-gray-600 font-medium">Active Subscribers</p>
            </div>
          </div>
          <div className="mt-4 pt-4 border-t border-pink-100">
            <div className="text-xs text-pink-600 font-medium">{stats.totalLists} lists, {stats.totalTags} tags</div>
          </div>
        </div>
        
        <div 
          className={cn(
            "bg-white rounded-2xl p-6 shadow-sm border border-gray-100 cursor-pointer transition-all duration-200",
            statusFilter === 'all' && listFilter === 'all' && tagFilter === 'all' ? "ring-2 ring-gray-400/20 border-gray-300" : "hover:shadow-md"
          )}
          onClick={() => {
            setStatusFilter('all');
            setListFilter('all');
            setTagFilter('all');
          }}
        >
          <div className="flex items-center gap-4">
            <div className="w-12 h-12 rounded-2xl bg-gray-100 flex items-center justify-center font-bold text-lg text-gray-600">
              {stats.total}
            </div>
            <div>
              <p className="text-2xl font-bold text-gray-900">{stats.total}</p>
              <p className="text-sm text-gray-600">Unique People</p>
            </div>
          </div>
          <div className="mt-4 pt-4 border-t border-gray-50">
            <div className="text-xs text-gray-500">{stats.multiList} in multiple lists</div>
          </div>
        </div>

        <div 
          className={cn(
            "bg-white rounded-2xl p-6 shadow-sm border border-gray-100 cursor-pointer transition-all duration-200",
            statusFilter === 'mixed' ? "ring-2 ring-purple-500/20 border-purple-200" : "hover:shadow-md"
          )}
          onClick={() => setStatusFilter('mixed')}
        >
          <div className="flex items-center gap-4">
            <div 
              className="w-12 h-12 rounded-2xl flex items-center justify-center font-bold text-lg text-white"
              style={{
                background: `linear-gradient(135deg, rgba(147, 51, 234, 0.9) 0%, rgba(79, 70, 229, 0.9) 100%)`
              }}
            >
              {stats.byStatus.mixed}
            </div>
            <div>
              <p className="text-2xl font-bold text-gray-900">{stats.byStatus.mixed}</p>
              <p className="text-sm text-gray-600">Mixed Status</p>
            </div>
          </div>
          <div className="mt-4 pt-4 border-t border-gray-50">
            <div className="text-xs text-gray-500">Different status per list</div>
          </div>
        </div>

        <div className="bg-white rounded-2xl p-6 shadow-sm border border-gray-100">
          <div className="flex items-center gap-4">
            <div 
              className="w-12 h-12 rounded-2xl flex items-center justify-center font-bold text-lg text-white"
              style={{
                background: `linear-gradient(135deg, rgba(251, 191, 36, 0.9) 0%, rgba(217, 119, 6, 0.9) 100%)`
              }}
            >
              {stats.vips}
            </div>
            <div>
              <p className="text-2xl font-bold text-gray-900">{stats.vips}</p>
              <p className="text-sm text-gray-600">VIP Members</p>
            </div>
          </div>
          <div className="mt-4 pt-4 border-t border-gray-50">
            <div className="text-xs text-gray-500">High-value subscribers</div>
          </div>
        </div>
        
        {/* Sync Status Tile */}
        <div className="bg-white rounded-2xl p-6 shadow-sm border border-gray-100">
          <div className="flex items-center gap-4 mb-4">
            <div className="w-12 h-12 rounded-2xl bg-gray-100 flex items-center justify-center font-bold text-lg text-gray-600">
              âŸ²
            </div>
            <div>
              <p className="text-lg font-semibold text-gray-900">Sync Status</p>
              <p className="text-xs text-gray-500">
                {lastSyncTime ? (
                  <>Last: {lastSyncTime.toLocaleDateString()}</>
                ) : (
                  <>No sync data</>
                )}
              </p>
            </div>
          </div>
          <Button 
            onClick={syncWithMailchimp}
            disabled={syncing}
            size="sm"
            variant="outline"
            className="w-full border-gray-300 text-gray-700 hover:bg-gray-100 text-xs"
          >
            {syncing ? 'Syncing...' : 'Sync from Mailchimp'}
          </Button>
        </div>
      </div>

      {/* Search & Filters */}
      <div className="bg-white rounded-2xl shadow-sm border border-gray-100">
        <div className="p-6">
          {/* Search - Always Visible */}
          <div className="mb-4">
            <Input
              type="text"
              placeholder="Search by name, email, tags, or lists..."
              value={searchQuery}
              onChange={(e) => onSearchChange(e.target.value)}
              className="h-12 bg-white border-gray-200 rounded-xl shadow-sm focus:ring-2 focus:ring-pink-500/20 focus:border-pink-500"
            />
          </div>
          
          {/* Filters Toggle */}
          <div 
            className="cursor-pointer flex items-center justify-between py-2"
            onClick={() => setFiltersCollapsed(!filtersCollapsed)}
          >
            <div className="text-sm font-medium text-gray-700">Advanced Filters</div>
            <div className="text-gray-500 font-mono text-sm">
              {filtersCollapsed ? '+' : 'âˆ’'}
            </div>
          </div>
        </div>
        
        {!filtersCollapsed && (
          <div className="px-6 pb-6 space-y-4 border-t border-gray-100">
          {/* List Filter */}
          <div>
            <label className="text-sm font-medium text-gray-700 mb-2 block">Audience List</label>
            <div className="flex items-center gap-2 flex-wrap">
              <Button
                variant={listFilter === 'all' ? 'default' : 'outline'}
                size="sm"
                onClick={() => setListFilter('all')}
                className={cn(
                  "rounded-xl transition-all duration-200",
                  listFilter === 'all'
                    ? "text-white shadow-sm"
                    : "border-gray-200 text-gray-700 hover:bg-gray-50"
                )}
                style={listFilter === 'all' ? {
                  background: `linear-gradient(135deg, rgba(236, 72, 153, 0.9) 0%, rgba(139, 92, 246, 0.9) 100%)`
                } : {}}
              >
                All Lists ({stats.total})
              </Button>
              {stats.byList.map((list) => (
                <Button
                  key={list.id}
                  variant={listFilter === list.id ? 'default' : 'outline'}
                  size="sm"
                  onClick={() => setListFilter(list.id)}
                  className={cn(
                    "rounded-xl transition-all duration-200",
                    listFilter === list.id
                      ? "text-white shadow-sm"
                      : "border-gray-200 text-gray-700 hover:bg-gray-50"
                  )}
                  style={listFilter === list.id ? {
                    background: `linear-gradient(135deg, rgba(59, 130, 246, 0.9) 0%, rgba(147, 51, 234, 0.9) 100%)`
                  } : {}}
                >
                  {list.name} ({list.total})
                </Button>
              ))}
            </div>
          </div>
          
          {/* Status Filter */}
          <div>
            <label className="text-sm font-medium text-gray-700 mb-2 block">Status</label>
            <div className="flex items-center gap-2 flex-wrap">
              <Button
                variant={statusFilter === 'all' ? 'default' : 'outline'}
                size="sm"
                onClick={() => setStatusFilter('all')}
                className={cn(
                  "rounded-xl transition-all duration-200",
                  statusFilter === 'all'
                    ? "text-white shadow-sm"
                    : "border-gray-200 text-gray-700 hover:bg-gray-50"
                )}
                style={statusFilter === 'all' ? {
                  background: `linear-gradient(135deg, rgba(236, 72, 153, 0.9) 0%, rgba(139, 92, 246, 0.9) 100%)`
                } : {}}
              >
                All Statuses ({stats.total})
              </Button>
              {(['subscribed', 'unsubscribed', 'cleaned', 'pending', 'mixed'] as const).map((status) => (
                <Button
                  key={status}
                  variant={statusFilter === status ? 'default' : 'outline'}
                  size="sm"
                  onClick={() => setStatusFilter(status)}
                  className={cn(
                    "rounded-xl transition-all duration-200",
                    statusFilter === status
                      ? "text-white shadow-sm"
                      : "border-gray-200 text-gray-700 hover:bg-gray-50"
                  )}
                  style={statusFilter === status ? {
                    background: status === 'subscribed' 
                      ? `linear-gradient(135deg, rgba(34, 197, 94, 0.9) 0%, rgba(21, 128, 61, 0.9) 100%)`
                      : status === 'unsubscribed'
                      ? `linear-gradient(135deg, rgba(239, 68, 68, 0.9) 0%, rgba(185, 28, 28, 0.9) 100%)`
                      : status === 'pending'
                      ? `linear-gradient(135deg, rgba(251, 191, 36, 0.9) 0%, rgba(217, 119, 6, 0.9) 100%)`
                      : status === 'mixed'
                      ? `linear-gradient(135deg, rgba(147, 51, 234, 0.9) 0%, rgba(79, 70, 229, 0.9) 100%)`
                      : `linear-gradient(135deg, rgba(249, 115, 22, 0.9) 0%, rgba(194, 65, 12, 0.9) 100%)`
                  } : {}}
                >
                  {status.charAt(0).toUpperCase() + status.slice(1)}
                  {stats.byStatus[status] > 0 && ` (${stats.byStatus[status]})`}
                </Button>
              ))}
            </div>
          </div>

          {/* Tag Filter */}
          {allTags.length > 0 && (
            <div>
              <label className="text-sm font-medium text-gray-700 mb-2 block">Tags</label>
              <div className="flex items-center gap-2 flex-wrap max-h-32 overflow-y-auto">
                <Button
                  variant={tagFilter === 'all' ? 'default' : 'outline'}
                  size="sm"
                  onClick={() => setTagFilter('all')}
                  className={cn(
                    "rounded-xl transition-all duration-200",
                    tagFilter === 'all'
                      ? "text-white shadow-sm"
                      : "border-gray-200 text-gray-700 hover:bg-gray-50"
                  )}
                  style={tagFilter === 'all' ? {
                    background: `linear-gradient(135deg, rgba(236, 72, 153, 0.9) 0%, rgba(139, 92, 246, 0.9) 100%)`
                  } : {}}
                >
                  All Tags
                </Button>
                {allTags.slice(0, 15).map((tag) => (
                  <Button
                    key={tag.name}
                    variant={tagFilter === tag.name ? 'default' : 'outline'}
                    size="sm"
                    onClick={() => setTagFilter(tag.name)}
                    className={cn(
                      "rounded-xl transition-all duration-200 text-xs",
                      tagFilter === tag.name
                        ? "text-white shadow-sm"
                        : "border-gray-200 text-gray-700 hover:bg-gray-50"
                    )}
                    style={tagFilter === tag.name ? {
                      background: `linear-gradient(135deg, rgba(16, 185, 129, 0.9) 0%, rgba(5, 150, 105, 0.9) 100%)`
                    } : {}}
                  >
                    {tag.name} ({tag.count})
                  </Button>
                ))}
                {allTags.length > 15 && (
                  <span className="text-xs text-gray-500">+{allTags.length - 15} more</span>
                )}
              </div>
            </div>
          )}
          </div>
        )}
      </div>

      {/* Members Table */}
      <div className="bg-white rounded-2xl shadow-sm border border-gray-100">
        <div className="p-6 border-b border-gray-100 flex items-center justify-between">
          <h3 className="text-lg font-semibold text-gray-900">
            Mailchimp Members ({filteredMembers.length})
          </h3>
          <div className="text-sm text-gray-500">
            Showing {startIndex + 1}â€“{Math.min(endIndex, filteredMembers.length)} of {filteredMembers.length}
          </div>
        </div>
        
        {filteredMembers.length === 0 ? (
          <div className="p-8 text-center text-gray-500">
            {searchQuery ? 'No members found matching your search.' : 'No members found with selected filters.'}
          </div>
        ) : (
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50 sticky top-0">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Member
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Email
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Lists & Status
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Tags
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Rating
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {currentPageMembers.map((member) => (
                  <tr key={member.email_address} className="hover:bg-gray-50 transition-colors">
                    <td className="px-6 py-4">
                      <div className="flex items-center">
                        <div className="w-8 h-8 rounded-lg bg-gray-100 flex items-center justify-center text-xs font-bold text-gray-700 flex-shrink-0 mr-3">
                          {member.merge_fields?.FNAME ? member.merge_fields.FNAME.charAt(0).toUpperCase() : member.email_address.charAt(0).toUpperCase()}
                        </div>
                        <div>
                          <div className="text-sm font-medium text-gray-900">
                            {member.full_name || `${member.merge_fields?.FNAME || ''} ${member.merge_fields?.LNAME || ''}`.trim() || member.email_address.split('@')[0]}
                          </div>
                          <div className="flex items-center gap-1 mt-1">
                            {member.is_vip_anywhere && (
                              <Badge className="text-xs bg-yellow-100 text-yellow-700 border-yellow-200">
                                VIP
                              </Badge>
                            )}
                            {member.list_memberships.length > 1 && (
                              <Badge className="text-xs bg-blue-50 text-blue-600 border-blue-200">
                                {member.list_memberships.length} lists
                              </Badge>
                            )}
                          </div>
                        </div>
                      </div>
                    </td>
                    <td className="px-6 py-4">
                      <div className="text-sm text-gray-900">{member.email_address}</div>
                      {member.first_signup_date && (
                        <div className="text-xs text-gray-500">
                          Joined: {formatDate(member.first_signup_date)}
                        </div>
                      )}
                    </td>
                    <td className="px-6 py-4">
                      <div className="space-y-1">
                        {member.list_memberships.slice(0, 3).map((membership) => (
                          <div key={membership.list_id} className="flex items-center gap-2">
                            <span className="text-sm text-gray-700 truncate max-w-32">
                              {membership.list_name}
                            </span>
                            <Badge className={cn("text-xs", getStatusBadgeColor(membership.status))}>
                              {membership.status}
                            </Badge>
                          </div>
                        ))}
                        {member.list_memberships.length > 3 && (
                          <div className="text-xs text-gray-500">
                            +{member.list_memberships.length - 3} more
                          </div>
                        )}
                      </div>
                    </td>
                    <td className="px-6 py-4">
                      <div className="flex flex-wrap gap-1">
                        {member.all_tags?.slice(0, 3).map((tag) => (
                          <Badge 
                            key={tag.id} 
                            className="text-xs bg-green-50 text-green-600 border-green-200"
                          >
                            {tag.name}
                          </Badge>
                        ))}
                        {member.all_tags && member.all_tags.length > 3 && (
                          <Badge className="text-xs bg-gray-50 text-gray-500 border-gray-200">
                            +{member.all_tags.length - 3}
                          </Badge>
                        )}
                      </div>
                    </td>
                    <td className="px-6 py-4">
                      <div className="flex items-center">
                        <div className="text-sm text-gray-900">
                          {member.aggregated_stats.avg_member_rating.toFixed(1)}/5
                        </div>
                        <div className="flex ml-1">
                          {[...Array(5)].map((_, i) => (
                            <span
                              key={i}
                              className={cn(
                                "text-xs",
                                i < Math.floor(member.aggregated_stats.avg_member_rating) ? "text-yellow-400" : "text-gray-300"
                              )}
                            >
                              â˜…
                            </span>
                          ))}
                        </div>
                      </div>
                      <div className="text-xs text-gray-500 mt-1">
                        {member.aggregated_stats.active_lists}/{member.aggregated_stats.total_lists} active
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
        
        {/* Pagination */}
        {filteredMembers.length > itemsPerPage && (
          <div className="px-6 py-4 border-t border-gray-100 flex items-center justify-between">
            <div className="text-sm text-gray-500">
              Page {currentPage} of {totalPages}
            </div>
            <div className="flex items-center gap-2">
              <Button
                variant="outline"
                size="sm"
                onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}
                disabled={currentPage === 1}
                className="border-gray-300 text-gray-700 hover:bg-gray-50"
              >
                Previous
              </Button>
              
              {/* Page numbers */}
              <div className="flex items-center gap-1">
                {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {
                  let pageNum;
                  if (totalPages <= 5) {
                    pageNum = i + 1;
                  } else if (currentPage <= 3) {
                    pageNum = i + 1;
                  } else if (currentPage >= totalPages - 2) {
                    pageNum = totalPages - 4 + i;
                  } else {
                    pageNum = currentPage - 2 + i;
                  }
                  
                  return (
                    <Button
                      key={pageNum}
                      variant={currentPage === pageNum ? "default" : "outline"}
                      size="sm"
                      onClick={() => setCurrentPage(pageNum)}
                      className={cn(
                        "w-8 h-8 p-0",
                        currentPage === pageNum
                          ? "text-white"
                          : "border-gray-300 text-gray-700 hover:bg-gray-50"
                      )}
                      style={currentPage === pageNum ? {
                        background: `linear-gradient(135deg, rgba(236, 72, 153, 0.9) 0%, rgba(139, 92, 246, 0.9) 100%)`
                      } : {}}
                    >
                      {pageNum}
                    </Button>
                  );
                })}
              </div>
              
              <Button
                variant="outline"
                size="sm"
                onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}
                disabled={currentPage === totalPages}
                className="border-gray-300 text-gray-700 hover:bg-gray-50"
              >
                Next
              </Button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}