"use client";

import { useState } from 'react';
import { VideoItem } from '@/lib/firebase/video-service';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Textarea } from '@/components/ui/textarea';
import { Input } from '@/components/ui/input';
import { 
  Calendar, 
  ExternalLink, 
  Upload, 
  Clock, 
  FileText, 
  Wand2,
  Video, 
  Tag, 
  MessageSquare, 
  Save,
  Loader2
} from 'lucide-react';
import { formatDuration } from '@/lib/utils';
import { Badge } from '@/components/ui/badge';
import { cn } from '@/lib/utils';

// Custom glassmorphism styles
const glassCard = "bg-white/70 backdrop-blur-md border border-gray-200 shadow-lg";
const glassItem = "bg-white/80 backdrop-blur-sm border border-gray-200 hover:bg-white/90";
const glassButton = "bg-white/80 backdrop-blur-sm border border-gray-200 hover:bg-white/90";
const glassInput = "bg-white/80 backdrop-blur-sm border border-gray-200";

export function VideoModal({
  video,
  isOpen,
  onClose,
  onUpdate,
}: {
  video: VideoItem | null;
  isOpen: boolean;
  onClose: () => void;
  onUpdate: (video: VideoItem) => Promise<void>;
}) {
  const [activeTab, setActiveTab] = useState('details');
  const [isGenerating, setIsGenerating] = useState(false);
  const [isUploading, setIsUploading] = useState(false);
  const [editedVideo, setEditedVideo] = useState<VideoItem | null>(video);
  const [isSaving, setIsSaving] = useState(false);
  
  if (!video || !editedVideo) return null;
  
  const handleGenerateDescription = async () => {
    if (!video.transcript) {
      // Show error message
      return;
    }
    
    setIsGenerating(true);
    // Call AI service to generate description based on transcript
    try {
      // Mock implementation
      await new Promise(resolve => setTimeout(resolve, 2000));
      setEditedVideo({
        ...editedVideo,
        description: "Generated description based on transcript: This video demonstrates the key features of our new product line. It showcases the intuitive interface, responsive design, and cutting-edge technology that sets our products apart from competitors. The video highlights how users can easily navigate through different functionalities and maximize productivity using our suite of tools.",
      });
    } finally {
      setIsGenerating(false);
    }
  };
  
  const handleUploadToYoutube = async () => {
    setIsUploading(true);
    try {
      // Mock implementation
      await new Promise(resolve => setTimeout(resolve, 2000));
      setEditedVideo({
        ...editedVideo,
        uploadedToYoutube: true,
        youtubeUrl: `https://youtube.com/watch?v=example${video.id}`,
      });
    } finally {
      setIsUploading(false);
    }
  };
  
  const handleSave = async () => {
    if (editedVideo) {
      setIsSaving(true);
      try {
        await onUpdate(editedVideo);
      } finally {
        setIsSaving(false);
        onClose();
      }
    }
  };
  
  const handleGenerateTranscript = async () => {
    setIsGenerating(true);
    try {
      // Mock implementation
      await new Promise(resolve => setTimeout(resolve, 3000));
      setEditedVideo({
        ...editedVideo,
        transcript: "This is a mock transcript generated for the video. It contains the full text of what was said in the video. This would typically be generated by a speech-to-text service, but for this demo, we're using a placeholder text. In a real implementation, this would contain the actual transcribed content from the video file."
      });
    } finally {
      setIsGenerating(false);
    }
  };
  
  const handleGenerateSocialPost = async (platform: string) => {
    if (!video.transcript) return;
    
    setIsGenerating(true);
    try {
      // Mock implementation
      await new Promise(resolve => setTimeout(resolve, 2000));
      // This would call the AI service to generate a social post
      return "ðŸ“º NEW VIDEO ALERT! ðŸš€\n\nJust released a new tutorial on our channel: \"" + video.title + "\".\n\nLearn how to master the essentials in under 10 minutes! Check it out now and level up your skills. #Tutorial #NewVideo #LearnWithUs";
    } finally {
      setIsGenerating(false);
    }
  };
  
  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className={cn("max-w-4xl max-h-[90vh] overflow-hidden flex flex-col", glassCard)}>
        <DialogHeader>
          <DialogTitle>{video.title}</DialogTitle>
          <DialogDescription>
            Manage video details, transcripts, and publishing options
          </DialogDescription>
        </DialogHeader>
        
        <Tabs 
          value={activeTab} 
          onValueChange={setActiveTab}
          className="flex-grow overflow-hidden flex flex-col mt-4"
        >
          <TabsList className={cn("mb-4", glassCard)}>
            <TabsTrigger value="details" className="data-[state=active]:text-gray-900 data-[state=active]:shadow-sm">
              <Video className="h-4 w-4 mr-2" />
              Details
            </TabsTrigger>
            <TabsTrigger value="transcript" className="data-[state=active]:text-gray-900 data-[state=active]:shadow-sm">
              <FileText className="h-4 w-4 mr-2" />
              Transcript
            </TabsTrigger>
            <TabsTrigger value="social" className="data-[state=active]:text-gray-900 data-[state=active]:shadow-sm">
              <MessageSquare className="h-4 w-4 mr-2" />
              Social
            </TabsTrigger>
          </TabsList>
          
          {/* Fixed height container for tab content */}
          <div className="h-[500px] overflow-hidden flex flex-col">
            {/* Each TabsContent should maintain the same height */}
            <TabsContent value="details" className="mt-0 h-full overflow-y-auto pr-2">
              <div className="grid grid-cols-3 gap-4">
                <div className="col-span-1">
                  <div className="aspect-video rounded-md overflow-hidden mb-4">
                    <img 
                      src={video.thumbnailUrl} 
                      alt={video.title}
                      className="h-full w-full object-cover"
                      onError={(e) => {
                        // Fallback if the thumbnail fails to load
                        e.currentTarget.src = "https://placehold.co/640x360?text=No+Preview";
                      }}
                    />
                  </div>
                  
                  <div className="space-y-2 text-sm">
                    <div className="flex items-center">
                      <Clock className="h-4 w-4 mr-2 text-muted-foreground" />
                      <span>{formatDuration(video.duration)}</span>
                    </div>
                    
                    <div className="flex items-center">
                      <Calendar className="h-4 w-4 mr-2 text-muted-foreground" />
                      <span>Created: {new Date(video.createdAt.toMillis()).toLocaleDateString()}</span>
                    </div>
                    
                    {video.vimeoId && (
                      <div className="flex items-center">
                        <ExternalLink className="h-4 w-4 mr-2 text-muted-foreground" />
                        <a 
                          href={`https://vimeo.com/${video.vimeoId}`}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="text-blue-600 hover:underline"
                        >
                          View on Vimeo
                        </a>
                      </div>
                    )}
                  </div>
                </div>
                
                <div className="col-span-2 space-y-4">
                  <div>
                    <label className="text-sm font-medium">Title</label>
                    <Input 
                      value={editedVideo.title} 
                      onChange={(e) => setEditedVideo({...editedVideo, title: e.target.value})}
                      className={glassInput}
                    />
                  </div>
                  
                  <div>
                    <div className="flex justify-between items-center mb-1">
                      <label className="text-sm font-medium">Description</label>
                      <Button 
                        variant="outline" 
                        size="sm"
                        onClick={handleGenerateDescription}
                        disabled={isGenerating || !video.transcript}
                        className={glassButton}
                      >
                        {isGenerating ? "Generating..." : "Generate with AI"}
                        {isGenerating ? <Loader2 className="h-3 w-3 ml-1 animate-spin" /> : <Wand2 className="h-3 w-3 ml-1" />}
                      </Button>
                    </div>
                    <Textarea 
                      value={editedVideo.description} 
                      onChange={(e) => setEditedVideo({...editedVideo, description: e.target.value})}
                      rows={6}
                      className={glassInput}
                    />
                  </div>
                  
                  <div>
                    <label className="text-sm font-medium mb-1 block">YouTube Status</label>
                    {editedVideo.uploadedToYoutube ? (
                      <div className="flex items-center space-x-2">
                        <Badge variant="outline" className="text-green-600 border-green-600 bg-green-50">Published on YouTube</Badge>
                        <a 
                          href={editedVideo.youtubeUrl} 
                          target="_blank"
                          rel="noopener noreferrer"
                          className="text-blue-600 hover:underline text-sm inline-flex items-center"
                        >
                          View <ExternalLink className="h-3 w-3 ml-1" />
                        </a>
                      </div>
                    ) : editedVideo.scheduledUploadDate ? (
                      <div className="flex items-center space-x-2">
                        <Badge variant="outline" className="text-amber-600 border-amber-600 bg-amber-50">
                          Scheduled for {new Date(editedVideo.scheduledUploadDate.toMillis()).toLocaleString()}
                        </Badge>
                        <Button 
                          variant="outline" 
                          size="sm"
                          onClick={() => setEditedVideo({...editedVideo, scheduledUploadDate: undefined})}
                        >
                          Cancel
                        </Button>
                      </div>
                    ) : (
                      <div className="flex items-center space-x-2">
                        <Button
                          variant="default"
                          onClick={handleUploadToYoutube}
                          disabled={isUploading}
                          className={glassButton}
                        >
                          {isUploading ? "Uploading..." : "Upload Now"}
                          {isUploading ? <Loader2 className="h-4 w-4 ml-2 animate-spin" /> : <Upload className="h-4 w-4 ml-2" />}
                        </Button>
                        <span className="text-sm text-muted-foreground">or</span>
                        <Button variant="outline" className={glassButton}>
                          Schedule Upload
                          <Calendar className="h-4 w-4 ml-2" />
                        </Button>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </TabsContent>
            
            <TabsContent value="transcript" className="mt-0 h-full overflow-y-auto pr-2">
              {editedVideo.transcript ? (
                <div className="space-y-4">
                  <div className="border rounded-md p-4 h-[400px] overflow-y-auto bg-muted/30">
                    {editedVideo.transcript.split('\n').map((paragraph, i) => (
                      <p key={i} className="mb-2">{paragraph}</p>
                    ))}
                  </div>
                  
                  <Button variant="outline" className={glassButton}>
                    Copy Transcript
                  </Button>
                </div>
              ) : (
                <div className="text-center py-8 h-full flex flex-col items-center justify-center">
                  <FileText className="h-12 w-12 mx-auto text-muted-foreground mb-4" />
                  <h3 className="text-lg font-medium mb-2">No Transcript Available</h3>
                  <p className="text-muted-foreground mb-4">Generate a transcript to unlock AI features</p>
                  <Button 
                    onClick={handleGenerateTranscript}
                    disabled={isGenerating}
                    className={glassButton}
                  >
                    {isGenerating ? "Generating..." : "Generate Transcript"}
                    {isGenerating && <Loader2 className="h-4 w-4 ml-2 animate-spin" />}
                  </Button>
                </div>
              )}
            </TabsContent>
            
            <TabsContent value="social" className="mt-0 h-full overflow-y-auto pr-2">
              <div className="space-y-6">
                <div>
                  <h3 className="text-lg font-medium mb-2">Tags</h3>
                  <div className="flex items-center">
                    <div className="flex-grow">
                      <Input 
                        placeholder="Enter tags separated by commas" 
                        value={(editedVideo.vimeoTags || []).join(', ')}
                        onChange={(e) => setEditedVideo({
                          ...editedVideo, 
                          vimeoTags: e.target.value.split(',').map(tag => tag.trim()).filter(Boolean)
                        })}
                        className={glassInput}
                      />
                    </div>
                    <Button variant="outline" className={cn("ml-2", glassButton)}>
                      <Wand2 className="h-4 w-4 mr-2" />
                      Generate Tags
                    </Button>
                  </div>
                </div>
                
                <div>
                  <h3 className="text-lg font-medium mb-2">Social Media Posts</h3>
                  <Tabs defaultValue="twitter">
                    <TabsList>
                      <TabsTrigger value="twitter">Twitter</TabsTrigger>
                      <TabsTrigger value="facebook">Facebook</TabsTrigger>
                      <TabsTrigger value="instagram">Instagram</TabsTrigger>
                    </TabsList>
                    
                    <TabsContent value="twitter" className="space-y-2 mt-2">
                      <Textarea 
                        placeholder="Twitter post content" 
                        rows={3}
                        className={glassInput}
                      />
                      <Button 
                        variant="outline"
                        onClick={() => handleGenerateSocialPost('twitter')}
                        disabled={isGenerating || !editedVideo.transcript}
                        className={glassButton}
                      >
                        <Wand2 className="h-4 w-4 mr-2" />
                        {isGenerating ? "Generating..." : "Generate Twitter Post"}
                      </Button>
                    </TabsContent>
                    
                    <TabsContent value="facebook" className="space-y-2 mt-2">
                      <Textarea 
                        placeholder="Facebook post content" 
                        rows={3}
                        className={glassInput}
                      />
                      <Button 
                        variant="outline"
                        onClick={() => handleGenerateSocialPost('facebook')}
                        disabled={isGenerating || !editedVideo.transcript}
                        className={glassButton}
                      >
                        <Wand2 className="h-4 w-4 mr-2" />
                        {isGenerating ? "Generating..." : "Generate Facebook Post"}
                      </Button>
                    </TabsContent>
                    
                    <TabsContent value="instagram" className="space-y-2 mt-2">
                      <Textarea 
                        placeholder="Instagram post content" 
                        rows={3}
                        className={glassInput}
                      />
                      <Button 
                        variant="outline"
                        onClick={() => handleGenerateSocialPost('instagram')}
                        disabled={isGenerating || !editedVideo.transcript}
                        className={glassButton}
                      >
                        <Wand2 className="h-4 w-4 mr-2" />
                        {isGenerating ? "Generating..." : "Generate Instagram Post"}
                      </Button>
                    </TabsContent>
                  </Tabs>
                </div>
              </div>
            </TabsContent>
          </div>
        </Tabs>
        
        <DialogFooter className="mt-4">
          <Button variant="outline" onClick={onClose} className={glassButton}>
            Cancel
          </Button>
          <Button onClick={handleSave} disabled={isSaving} className={cn("gap-1", glassButton)}>
            {isSaving ? <Loader2 className="h-4 w-4 mr-2 animate-spin" /> : <Save className="h-4 w-4 mr-2" />}
            Save Changes
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
} 